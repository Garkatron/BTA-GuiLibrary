<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="GUI-LIBRARY-HTML-SCHEMA"
           xmlns="GUI-LIBRARY-HTML-SCHEMA"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           elementFormDefault="qualified">

    <!--
        Inheritance
        <xs:import namespace="http://example.com/base" schemaLocation="base.xsd"/>
    -->

    <!-- SPECIAL -->
    <xs:element name="link">
        <xs:annotation>
            <xs:documentation>
                Use this element to link your style files in .yaml format.
                Multiple links can be used to merge styles.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="src" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <!-- LOGICAL -->

    <xs:complexType name="LogicalElement">
        <xs:attribute name="src" type="xs:string"/>
        <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:element name="component">
        <xs:annotation>
            <xs:documentation>
                Define a custom component by enclosing other elements within this tag.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="LogicalElement">
                    <xs:sequence>
                        <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="module">
        <xs:annotation>
            <xs:documentation>
                Use inside "component" tags to associate it with a specific module.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="LogicalElement">
                    <xs:sequence>
                        <xs:element ref="component" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="templates">
        <xs:annotation>
            <xs:documentation>
                A container element for reusable templates. It can include multiple module elements.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="LogicalElement">
                    <xs:sequence>
                        <xs:element ref="module" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- BASE -->
    <xs:complexType name="BasicNode">
        <xs:attribute name="id" type="xs:string"/>
        <xs:attribute name="group" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="BaseNode">
        <xs:complexContent>
            <xs:extension base="BasicNode">
                <xs:sequence>
                    <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>

                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="BaseLayout">
        <xs:complexContent>
            <xs:extension base="BaseNode">
                <xs:sequence>
                    <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="direction">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="vertical"/>
                            <xs:enumeration value="horizontal"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:element name="call">
        <xs:annotation>
            <xs:documentation>
                Invoke components by specifying the template.module.component name in the call tag "component" attribute.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">
                    <xs:sequence>
                        <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute type="xs:string" name="component"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>


    <xs:element name="test">
        <xs:annotation>
            <xs:documentation>
                A test node (Only BUI Devs)
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">
                    <xs:sequence>
                        <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- BASE CONTAINER -->

    <xs:complexType name="BaseContainer">
        <xs:complexContent>
            <xs:extension base="BaseNode">
                <xs:sequence>
                    <xs:element ref="slot" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- DEFINITIONS -->


    <xs:element name="node">
        <xs:annotation>
            <xs:documentation>
                The simplest node element in the GUI library.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">
                    <xs:sequence>
                        <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="div">
        <xs:annotation>
            <xs:documentation>
                Similar to "node" but under a different name.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">
                    <xs:sequence>
                        <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="body">
        <xs:annotation>
            <xs:documentation>
                Similar to "node" but under a different name, representing the main content container.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">
                    <xs:sequence>
                        <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="label">
        <xs:annotation>
            <xs:documentation>
                Displays text on the screen. It only works with textual content inside the tag.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BasicNode">
                    <xs:attribute name="maxTextLength" type="xs:unsignedInt"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="progressBar">
        <xs:annotation>
            <xs:documentation>
                Represents a bar that visually shows progress.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BasicNode">
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="deus">
        <xs:annotation>
            <xs:documentation>
                A hidden "easter egg" element.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BasicNode">
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="button">
        <xs:annotation>
            <xs:documentation>
                Represents a standard clickable button.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">
                    <xs:sequence>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="slider">
        <xs:annotation>
            <xs:documentation>
                A graphical control for adjusting a value within a range.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BasicNode">
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="slot">
        <xs:annotation>
            <xs:documentation>
                Defines a slot. Only works inside container tags.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="maxItemAmount" type="xs:integer"/>
            <xs:attribute name="id" type="xs:string"/>
            <xs:attribute name="group" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="draggableElement">
        <xs:annotation>
            <xs:documentation>
                An element that can be dragged and rendered dynamically while being pressed.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">
                    <xs:sequence>
                        <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="inventory">
        <xs:annotation>
            <xs:documentation>
                Represents an inventory system. Place "slot" elements inside.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseContainer">
                    <xs:sequence>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="playerInventory">
        <xs:annotation>
            <xs:documentation>
                Displays the entire player inventory. There is no need to specify slots individually within this element. It extends the BaseContainer element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseContainer">
                    <xs:sequence>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="craftingTable">
        <xs:annotation>
            <xs:documentation>
                Represents a crafting table. While this element displays the table, you need to implement the crafting logic separately.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseContainer">
                    <xs:sequence>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="container">
        <xs:annotation>
            <xs:documentation>
                Serves as a container for slots. Use this element to organize and manage slot arrangements within your GUI.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseContainer">
                    <xs:sequence>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="layout">
        <xs:annotation>
            <xs:documentation>
                Acts as a base tag for creating aesthetically pleasing layouts. It inherits from the BaseLayout element.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseLayout">
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="scrollableLayout">
        <xs:annotation>
            <xs:documentation>
                Functions as a base tag for creating scrollable layouts. It includes attributes to define the maximum (maxScroll) and minimum (minScroll) scroll limits. Extends the BaseLayout element.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseLayout">
                    <xs:attribute name="maxScroll" type="xs:string"/>
                    <xs:attribute name="minScroll" type="xs:string"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>


    <xs:element name="panel">
        <xs:annotation>
            <xs:documentation>
                A structural element that organizes child elements. It extends the BaseNode and can be used to group related elements in a GUI.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseNode">

                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="textArea">
        <xs:annotation>
            <xs:documentation>
                Represents a text area where users can input or display multiline text. Includes an attribute (maxTextLength) to specify the maximum number of characters allowed.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BasicNode">
                    <xs:attribute name="maxTextLength" type="xs:unsignedInt"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="textField">
        <xs:annotation>
            <xs:documentation>
                Represents a text field for single-line input or display. It also includes an attribute (maxTextLength) for defining the maximum character count.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BasicNode">
                    <xs:attribute name="maxTextLength" type="xs:unsignedInt"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>


    <xs:element name="image">
        <xs:annotation>
            <xs:documentation>
                Used to display an image in the GUI
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence/>
            <xs:attribute name="id" type="xs:string"/>
            <xs:attribute name="group" type="xs:string"/>
            <xs:attribute name="src" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="root">
        <xs:annotation>
            <xs:documentation>
                The root element of the schema, capable of including various elements or definitions.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:any namespace="GUI-LIBRARY-HTML-SCHEMA" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>

            </xs:choice>
            <xs:attribute name="version">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="1.0"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>


</xs:schema>
